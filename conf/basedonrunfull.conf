{
  "files": [
    "certora/harness/SmartVaultHarness.sol:SmartVaultHarness",
    "certora/harness/PriceOracleHarness.sol:PriceOracleHarness",
    "packages/smart-vault/contracts/test/samples/TokenMock.sol:TokenMock",
    "packages/smart-vault/contracts/test/samples/WrappedNativeTokenMock.sol:WrappedNativeTokenMock",
    "packages/smart-vault/contracts/test/core/SwapConnectorMock.sol:SwapConnectorMock",
    "packages/registry/contracts/registry/Registry.sol:Registry",
    "packages/smart-vault/contracts/test/samples/DexMock.sol:DexMock",
    "certora/harness/Aave/AaveV2Token.sol:AaveV2Token",
    "certora/harness/Aave/incentivesControllerMock.sol:incentivesController",
    "certora/harness/Aave/lendingPoolMock.sol:lendingPool"
  ],
  "verify": [
    "SmartVaultHarness:certora/specs/SmartVault.spec"
  ],
  "solc": "solc",
  "link": [
    "SwapConnectorMock:dex=DexMock",
    "AaveV2Token:pool=lendingPool",
    "AaveV2Token:incentivesController=incentivesController",
    "SmartVaultHarness:wrappedNativeToken=WrappedNativeTokenMock",
    "SmartVaultHarness:priceOracle=PriceOracleHarness",
    "SmartVaultHarness:swapConnector=SwapConnectorMock",
    "SmartVaultHarness:Token=TokenMock",
    "SmartVaultHarness:aToken=AaveV2Token",
    "SmartVaultHarness:lendingPool=lendingPool",
    "SmartVaultHarness:incentivesController=incentivesController"
  ],
  "staging": "master",
  "msg": "basedOnRunFull - rule pricesEqualZeroMutually",
  "optimistic_loop": true,
  "multi_assert_check": false,
  "send_only": true,
  "smt_timeout": "600",
  "loop_iter": "2",
  "disableLocalTypeChecking": false,
  "rule": [
    "pricesEqualZeroMutually"
  ],
  "packages": [
    "@openzeppelin=node_modules/@openzeppelin",
    "@mimic-fi=node_modules/@mimic-fi",
    "@uniswap=node_modules/@uniswap",
    "@chainlink=node_modules/@chainlink"
  ],
  "optimisticFallback": true,
  "contractRecursionLimit": "1",
  "mediumTimeout": "800"
}